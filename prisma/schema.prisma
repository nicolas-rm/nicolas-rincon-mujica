generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// ==================================================
// AUTHENTICATION
// ==================================================

model Auth {
    id                  String               @id @default(uuid())
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    email               String               @unique
    passwordHash        String
    tokens              RefreshToken[]
    user                User?                @relation(fields: [userId], references: [id])
    userId              String?              @unique
    passwordResetTokens PasswordResetToken[]
    accessTokens        AccessToken[]
}

// ==================================================
// USER INFORMATION
// ==================================================

model User {
    id        String     @id @default(uuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    auth      Auth?
    profile   Profile?
    addresses Address[]
    phones    Phone[]
    roles     UserRole[]
}

model Profile {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id])
    name      String
    lastName  String
    birthDate DateTime
}

// ==================================================
// ADDRESS NORMALIZATION
// ==================================================

model Country {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique
    states    State[]
}

model State {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    countryId String
    country   Country  @relation(fields: [countryId], references: [id])
    cities    City[]
}

model City {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    name      String
    stateId   String
    state     State     @relation(fields: [stateId], references: [id])
    addresses Address[]
}

model Address {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    street    String
    number    String
    zipCode   String
    cityId    String
    city      City     @relation(fields: [cityId], references: [id])
}

model Phone {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    number    String   @unique
}

// ==================================================
// ROLES AND PERMISSIONS
// ==================================================

// Definimos los enums para acciones y sujetos
enum Action {
    MANAGE
    CREATE
    READ
    UPDATE
    DELETE
    LOGIN
    LOGOUT
    // AÃ±ade otras acciones si es necesario
}

enum Subject {
    Auth
    User
    Profile
    Address
    Phone
    CreditRequest
    Country
    State
    City
    Role
    Permission
    RolePermission
    UserRole
    RefreshToken
    PasswordResetToken
    Audit
    Unknown
}

model Role {
    id          String           @id @default(uuid())
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    name        String           @unique
    description String?
    permissions RolePermission[]
    users       UserRole[]
}

model Permission {
    id          String           @id @default(uuid())
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    action      Action
    subject     Subject
    description String?
    roles       RolePermission[]
}

model RolePermission {
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    roleId       String
    permissionId String
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@id([roleId, permissionId])
}

model UserRole {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    roleId    String
    user      User     @relation(fields: [userId], references: [id])
    role      Role     @relation(fields: [roleId], references: [id])

    @@id([userId, roleId])
}

// ==================================================
// SECURITY AND AUTHORIZATION
// ==================================================

model AccessToken {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    token     String   @unique
    authId    String
    auth      Auth     @relation(fields: [authId], references: [id])
    // expiresAt DateTime
}

model RefreshToken {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    token     String   @unique
    authId    String
    auth      Auth     @relation(fields: [authId], references: [id])
    expiresAt DateTime
}

// ==================================================
// PASSWORD RESET TOKENS
// ==================================================

model PasswordResetToken {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    token     String   @unique
    expiresAt DateTime
    authId    String
    auth      Auth     @relation(fields: [authId], references: [id])
}

// ==================================================
// PRODUCT
// ==================================================
model Product {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String
    height      Float?
    length      Float?
    width       Float?
}
